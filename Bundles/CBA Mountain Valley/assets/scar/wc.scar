--[[ 

EXAMPLE GAME MODE SCRIPT

This script demonstrates how to use an assortment of SCAR (Scripting at Relic) functions to create a Game Mode for Age of Empires IV. 
We demonstrate how to setup a simple win condition that awards victory to the first player who constructs 5 houses and covers an assortment of topics like building/unit spawning, event tracking, and much more.

Search for the following topic titles (e.g. OPTIONS, RULES, etc.) in this script to see examples of their usage. 

- OPTIONS allow you to add buttons to the Skirmish/Custom lobby when your Game Mode is selected and trigger functions based on what the host has selected. The buttons are added in the Options section of the Win Condition .rdo file and their functionality is driven by this script.
- RULES allow you to call script functions after a delay, on an interval, or whenever a game event (e.g. a unit is killed) occurs.
- OBJECTIVES communicate what the players' goals are and how they are progressing towards them using a UI element at the top left of their screen.
- ENTITIES are the objects you see in-game, like player constructed buildings, Sacred Sites, Stone Deposits, and Trees. Type "Entity_" in this script to view a list of functions you can use to manipulate these objects.
- SQUADS are in-game units. Type "Squad_" in this script to view a list of functions you can use to manipulate these objects.
- ENTITY GROUPS and SQUAD GROUPS (aka EGROUPS/SGROUPS) are bundles of Entities/Squads. It sometimes makes sense to add a number of objects to a group so you can manipulate them together (e.g. you may want to add a group of Spearmen to an SGROUP so you can command them all to attack a location).
- UPGRADES unlock functionality for a player, a unit, or a building.
- BLUEPRINTS are the instructions needed to create an Entity, Squad, or Upgrade. For example, a blueprint exists for each Civilization Villager. If you want to spawn a Mongol Villager, you will need to reference the Mongol Villager Blueprint. Type "BP_" in this script to view a list of Blueprint functions.
- EVENT CUES are messages that appear in the queue at the bottom-right of the player's screen. Some event cues occur automatically, like when an upgrade completes. You can configure your own event cues to communicate important game mode events to the player.

To play and test this Game Mode:

1. From the editor toolbar, select File > Save All to save any changes you have made to this mod.
2. From the editor toolbar, select Build > Build Mod.
3. Launch Age of Empires IV.
4. In the game client, navigate to Single Player > Skirmish > Create Game (alternatively, you can navigate to Multiplayer > Custom > Create Game).
5. In the Game Setup tab of the lobby, select the Edit button.
6. Select your Game Mode* and Start Game.

*Your Game Mode will have a red wrench icon next to it. This means that it is a local mod and you cannot launch with other players in the lobby. If you would like to play this Game Mode with other players, you will either need to:
1. Share your mod file with another player and have them place it in the following directory: YourDriveHere:\Users\YourNameHere\Documents\My Games\Cardinal\mods\extension\local 
2. Publish your Mod from the Mods > My Mods screen. This will publish your Game Mode to all Age of Empires IV players! When a host selects your Game Mode, it will automatically be downloaded for other players in the lobby.


Additional documentation and function references can be found online.

]]

-----------------------------------------------------------------------
-- Imported Scripts

-- When you import a .scar file it will be initialized alongside your Game Mode .scar script. 
-- You can also call functions from imported scripts directly. For example, cardinal.scar has a function called Player_SetCurrentAge() that allows you to set the age of a given player. To use this function, you first have to import cardinal.scar as is demonstrated below.
-- To examine the below scripts, right-click on the import() function and select "Open Document"
-----------------------------------------------------------------------

-- Import Utility Scripts
import("cardinal.scar")							-- Contains sfx references, UI templates, and Civ/Age helper functions
import("ScarUtil.scar")							-- Contains game helper functions

-- Import Gameplay Systems
import("gameplay/score.scar")					-- Tracks player score
import("mydiplomacy.scar")				-- Manages Tribute

-- Import Win Conditions
	-- Support for eliminating a player when they can no longer fight or produce units
import("winconditions/elimination.scar")		-- Support for player quitting or dropping (through pause menu or disconnection)
import("mysurrender.scar")			-- Support for player surrender (through pause menu)
-- import("winconditions/religious.scar")
-- import("winconditions/conquest.scar")
import("myreligious.scar")
-- import("myannihilation.scar")	


-- Import UI Support
import("gameplay/chi/current_dynasty_ui.scar")	-- Displays Chinese Dynasty UI

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

-- Global data table that can be referenced in script functions (e.g. _mod.module = "Mod")
_mod = {
	module = "Mod",
	debug = false,
	objective_title = "Destroy All Castles",
	objective_meet = 0 ,
	objective_requirement = 0,
	obj_kill_title = "Your Kill Points",
	options = {},
	group_counter = 0, 
	center,
	castles = {},
	icons = {
		objective = "icons\\races\\common\\victory_conditions\\victory_condition_conquest",
	},
	rewards = {}, 
}

-- Register the win condition (Some functions can be prepended with "Mod_" to be called automatically as part of the scripting framework)
Core_RegisterModule(_mod.module)

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

-- Called during load as part of the game setup sequence
function Mod_OnGameSetup()
	
	-- The following if statement checks which OPTIONS the host of the match selected.
	-- The UI buttons visible to the host via the game lobby are added in the Options section of the Win Condition .rdo file and their functionality is driven by the code below.
	-- In this example, the host can choose to give every play 200 resources per minute or 500 resources per minute
	
	-- Get the host-selected Options configured in the mod's .rdo file
	-- Setup_GetWinConditionOptions(_mod.options)
	
	-- Check if there is the economy_section data is available.
	-- economy_section matches the name of the OptionsSectionUIDescriptor Key configured in your Game Mode Win Condition .rdo file.
end

-- Called before initialization, preceding other module OnInit functions
function Mod_PreInit()
	
	-- Enables the Tribute UI by calling the TributeEnabled function in diplomacy.scar, which was imported at the top of this script
	-- Remove this or set to false if you do not want players to have access to resource trading via the Tribute panel
	-- Core_CallDelegateFunctions("TributeEnabled", true)
	
end

import("rewards.scar")

-- Called on match initialization before handing control to the player
function Mod_OnInit() 
	
	-- Store the local player so we can reference them later
	localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	
	Mod_SetupRewards()
	-- CALLING FUNCTIONS: The following calls the keepTownCenter() and Mod_SpawnBuilding() functions directly and immediately.
	Mod_FindKeep()
	-- ONE SHOT RULES: The following rule runs the Mod_SpawnUnits() function after a 5 second delay. If you want to call a function without a delay, you can change the 5 to a 0 or simply call the function directly by typing Mod_SetupObjective()
	-- Rule_AddOneShot(Mod_SpawnUnits, 5)
	-- INTERVAL RULES: The following rule runs the Mod_GiveResources() function every 60 seconds. This is useful for functions that need to query a game state or perform an action every so often (e.g. give players resources or spawning waves of enemies)
	-- Rule_AddInterval(Mod_GiveResources, 60)
	-- GLOBAL EVENT RULES: The following rule runs the Mod_OnConstructionComplete() function whenever a building is constructed. Type "GE_" in this script to see a list of global events.
	
	

	
	
	-- This is a for loop that does something for each player in the match.
	-- PLAYERS is a table that contains all of the players in the match.
	-- If there are two players it will run twice, if there are eight players it will run eight times, etc.
	for i, player in pairs(PLAYERS) do
		
		-- Set player starting Ages to Imperial
		-- Ages are mapped to: Dark Age = 1, Feudal Age = 2, Castle Age = 3, Imperial Age = 4
		Player_SetCurrentAge(player.id, 2)
		
		player.killed_number = 0
		player.obj_kill_requirement = 0
		player.obj_kill_requirement = nextRequirement(player)
		
		local player_civ = Player_GetRaceName(player.id)
		
		player.unit_type = _mod.rewards[player_civ][0].unit_upgrade
		player.unit_num =  _mod.rewards[player_civ][0].num_upgrade
		
		-- Set player starting resources
		-- RT stands for Resource Type
		Player_SetResource(player.id, RT_Food, 50000)		
		Player_SetResource(player.id, RT_Wood, 50000)
		Player_SetResource(player.id, RT_Gold, 50000)
		Player_SetResource(player.id, RT_Stone, 50000)
		
		-- Set starting population cap to 50
		Player_SetMaxPopulation(player.id, CT_Personnel, 300)
		
	end

	
	egroup = EGroup_Create("sites")
	World_GetAllNeutralEntities(egroup)
	EGroup_Filter(egroup,"special_beacon",FILTER_KEEP)
	local site =  EGroup_GetEntityAt(egroup, 1)
	_mod.center = Entity_GetPosition(site)
	
		
	Rule_AddOneShot(Mod_InitUnits, 1)
	
	Rule_AddOneShot(Mod_SpawnUnits, 1)
	
	Rule_AddInterval(Mod_SpawnUnits, 6)
	
	Rule_AddGlobalEvent(Mod_OnEntityKilled, GE_EntityKilled)

	
	Core_CallDelegateFunctions("DiplomacyEnabled", true)
	Core_CallDelegateFunctions("TributeEnabled", true)
end

-- Called after initialization is done when game is fading up from black
function Mod_Start()
	
	-- Setup the player's objective UI by calling the below function directly
	Mod_SetupObjective()
	
end

-- Called when Core_SetPlayerDefeated() is invoked. Signals that a player has been eliminated from play due to defeat.
function Mod_OnPlayerDefeated(player, reason)
	
	
	
end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Mod_OnGameOver()
	
	-- It is good practice to remove any Rules that were configured so they do not continue to run after the match has concluded
	Rule_RemoveGlobalEvent(Mod_OnConstructionComplete)

end

-----------------------------------------------------------------------
-- Mod Functions
-----------------------------------------------------------------------

-- This function creates the objective UI that appears in the top-left corner of each player's screen
function Mod_SetupObjective()
	
	-- Check if an objective has not been created yet
	if _mod.objective == nil then 
		
		-- Create and store objective in the global table created at the start of this script
		_mod.objective = Obj_Create(localPlayer.id, _mod.objective_title, Loc_Empty(), _mod.icons.objective, "ConquestObjectiveTemplate", localPlayer.raceName, OT_Primary, 0, "conquestObj")		
		
		
		 
		_mod.objective_requirement = 0	
		_mod.objective_meet = 0	
		
		for _, player in pairs(PLAYERS) do
			if Player_ObserveRelationship(player.id, localPlayer.id) == R_ALLY then
				-- nothing
			else
				_mod.objective_requirement = _mod.objective_requirement + 1 
			end
		end
		
		-- Sets the objective's state to incomplete
		Obj_SetState(_mod.objective, OS_Incomplete)
		-- Sets the objective to visible so players can see it
		Obj_SetVisible(_mod.objective, true)
		-- Sets the progress element of the objective to visible so players can see it
		Obj_SetProgressVisible(_mod.objective, true)		
		-- Sets the objective progress type to a counter
		Obj_SetCounterType(_mod.objective, COUNTER_CountUpTo)
		-- Set the starting objective progress to 1 because we spawn a House for the player in Mod_SpawnBuilding()
		Obj_SetCounterCount(_mod.objective, 0)
		-- Set the maximum objective progress
		Obj_SetCounterMax(_mod.objective, _mod.objective_requirement)
		-- Set the objective progress bar percentage value
		Obj_SetProgress(_mod.objective, 0)
		
		local uiColour = Player_GetUIColour(localPlayer.id)
		UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, "Credit for map to Skrip#0209 and Hanks Narrow Urethra", Loc_Empty(), "event_with_player_color", "", "", uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing)
		UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, "Credit for base and gamemode to kzoacn@github", Loc_Empty(), "event_with_player_color", "", "", uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing)
	end
	
	if _mod.obj_kill == nil then 
		
		-- Create and store objective in the global table created at the start of this script
		_mod.obj_kill = Obj_Create(localPlayer.id, _mod.obj_kill_title, Loc_Empty(), _mod.icons.objective, "ConquestObjectiveTemplate", localPlayer.raceName, OT_Primary, 0, "conquestObj")		
 
		
		local player_civ = Player_GetRaceName(localPlayer.id)
		
		local obj_kill_requirement=0
		for _, player in pairs(PLAYERS) do
			if player.id==localPlayer.id then
				obj_kill_requirement = player.obj_kill_requirement
			end
		end
		
		Obj_SetTitle( _mod.obj_kill,string.format("Next Rewards : %s",_mod.rewards[player_civ][obj_kill_requirement].title))
		-- Sets the objective's state to incomplete
		Obj_SetState(_mod.obj_kill, OS_Incomplete)
		-- Sets the objective to visible so players can see it
		Obj_SetVisible(_mod.obj_kill, true)
		-- Sets the progress element of the objective to visible so players can see it
		Obj_SetProgressVisible(_mod.obj_kill, true)		
		-- Sets the objective progress type to a counter
		Obj_SetCounterType(_mod.obj_kill, COUNTER_CountUpTo)
		-- Set the starting objective progress to 1 because we spawn a House for the player in Mod_SpawnBuilding()
		Obj_SetCounterCount(_mod.obj_kill, 0)
		-- Set the maximum objective progress
		Obj_SetCounterMax(_mod.obj_kill, obj_kill_requirement)
		-- Set the objective progress bar percentage value
		Obj_SetProgress(_mod.obj_kill, 0)
	end
end

 




-- This function finds the starting Town Center for all players in the match, reveals it to all other players, and increases its production speed
function Mod_FindKeep()
	
	-- This is a for loop that does something for each player in the match.
	-- PLAYERS is a table that contains all of the players in the match.
	-- If there are two players it will run twice, if there are eight players it will run eight times, etc.
	for i, player in pairs(PLAYERS) do
		
		-- Get the player's entities and place them into an ENTITY GROUP
		local eg_player_entities = Player_GetEntities(player.id)
		
		-- Filter out everything in the ENTITY GROUP except for the Town Center
		EGroup_Filter(eg_player_entities, "castle", FILTER_KEEP)
		
		-- Get the Town Center ENTITY by getting the first entry in the ENTITY GROUP we just filtered
		local entity =  EGroup_GetEntityAt(eg_player_entities, 1)
		
		-- entity.init = true
		
		-- Get the Town Center's ENTITY ID
		-- Some functions require the ENTITY ID to perform an action on the ENTITY
		local entity_id = Entity_GetID(entity) 
		-- Get the Town Center's position
		local position = Entity_GetPosition(entity)
		
		_mod.castles[entity_id] = entity
		
		-- Store the player's Town Center information so it can be referenced later
		player.keep = {
			entity = entity,
			entity_id = entity_id,
			position = position,
		}
			
		-- Reveal Town Center locations for the first 30 seconds of the match
		FOW_RevealArea(player.keep.position, 999, 10)
		
		-- Increase the production speed of the player's Town Center
		--Modifier_ApplyToEntity(Modifier_Create(MAT_Entity, "production_speed_modifier", MUT_Multiplication, false, 20, nil), player.keep.entity, 0.0)
		
	end
end

-- This function spawns a group of Spearmen next each player's Town Center


function SpawnAndMove(player,unit,num)
	if Core_IsPlayerEliminated(player.id) or Player_GetCurrentPopulation(player.id,CT_Personnel)>=200 then
		return 
	end
	
	local spawn_position = Util_GetOffsetPosition(player.keep.position, 20, 10)
	local sgroup_name = "sg_player_spearmen_" .. tostring(player.id) .. "_".. tostring(_mod.group_counter)
	_mod.group_counter = _mod.group_counter + 1
	local sg_player_spearmen = SGroup_CreateIfNotFound(sgroup_name)
	UnitEntry_DeploySquads(player.id, sg_player_spearmen, {{sbp = unit, numSquads = num }}, spawn_position)
	local move_position = Util_GetPositionFromAtoB(player.keep.position,_mod.center, 27)
	Cmd_FormationMove(sg_player_spearmen, move_position, false)
end

function Mod_InitUnits()
	for i, player in pairs(PLAYERS) do
		local player_civ = Player_GetRaceName(player.id)
		
		local unit_type 
		local unit_num = 1
		
		
		if player_civ == "english" then
			unit_type = BP_GetSquadBlueprint("unit_villager_1_eng")
		elseif player_civ == "chinese" then
			unit_type = BP_GetSquadBlueprint("unit_villager_1_chi")
		elseif player_civ == "french" then
			unit_type = BP_GetSquadBlueprint("unit_villager_1_fre")
		elseif player_civ == "hre" then
			unit_type = BP_GetSquadBlueprint("unit_villager_1_hre")
		elseif player_civ == "mongol" then
			unit_type = BP_GetSquadBlueprint("unit_khan_1_mon")-- unit_genghis_khan_cmp_mon
		elseif player_civ == "rus" then
			unit_type = BP_GetSquadBlueprint("unit_villager_1_rus")
		elseif player_civ == "sultanate" then
			unit_type = BP_GetSquadBlueprint("unit_villager_1_sul")
		elseif player_civ == "abbasid" then
			unit_type = BP_GetSquadBlueprint("unit_villager_1_abb")
		end 
		
		SpawnAndMove(player,unit_type,unit_num)
	end	
end



function Mod_SpawnUnits()
	for i, player in pairs(PLAYERS) do
		local player_civ = Player_GetRaceName(player.id)
		local unit_type =  player.unit_type -- _mod.rewards[player_civ][0].unit_upgrade
		local unit_num =  player.unit_num  
		SpawnAndMove(player,unit_type,unit_num) 
	end
end
 
function nextRequirement(player)
	local player_civ = Player_GetRaceName(player.id)
	
	mn=100000
	for i,reward in pairs(_mod.rewards[player_civ]) do
		if reward ~= nil and i > player.obj_kill_requirement and i < mn then
			mn = i
		end
	end
	return mn
end
 

function Mod_OnEntityKilled(context)
	
	
	for castle_id, castle in pairs(_mod.castles) do
		if castle_id == context.victim.EntityID then
			local victim = context.victimOwner
			if victim==nil then
				return 
			end
			if Core_IsPlayerEliminated(victim) then
				return  
			end
			if victim ~= localPlayer.id and Player_ObserveRelationship(victim, localPlayer.id) ~= R_ALLY then
				_mod.objective_meet = _mod.objective_meet + 1
				Obj_SetCounterCount(_mod.objective, _mod.objective_meet)
				Obj_SetProgress(_mod.objective, _mod.objective_meet/ _mod.objective_requirement)
				if _mod.objective_meet==_mod.objective_requirement then
					Core_SetPlayerVictorious(localPlayer.id, Mod_WinnerPresentation, WR_CONQUEST)		
					Core_OnGameOver()
				end
			end
			
			Core_SetPlayerDefeated(victim, Mod_LoserPresentation, WR_CONQUEST)
			local entities = Player_GetEntities(victim)
			EGroup_Destroy(entities)
			World_KillPlayer(victim,KPR_Lost)
			
			Surrender_CheckVictory(victim)
	
			local localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
			if victim == localPlayer.id and Core_RevealFOWOnEliminationEnabled() then
				FOW_UIRevealAll()
			end
		end
	end
	
	
	

	
	
	
	if context.killer==nil then
		return 
	end
	
	local entity = Entity_FromID(context.killer.EntityID)
	local player = Util_GetPlayerOwner(entity)
	
	if player==nil then
		return
	end
	  
	player = PLAYERS[World_GetPlayerIndex(player)]
	
	player.killed_number = player.killed_number + 1
	
	local player_civ = Player_GetRaceName(player.id)
	
	if player.id == localPlayer.id then
		
		if player.killed_number >= player.obj_kill_requirement then
			local nxt = nextRequirement(player)
			local str
			
			if _mod.rewards[player_civ][nxt]==nil then
				str="None"
			else
				str = _mod.rewards[player_civ][nxt].title
			end
			Obj_SetTitle(_mod.obj_kill,string.format("Next Rewards : %s",str))
		end
		
		Obj_SetCounterMax(_mod.obj_kill, player.obj_kill_requirement)
		Obj_SetCounterCount(_mod.obj_kill, player.killed_number)
		Obj_SetProgress(_mod.obj_kill, player.killed_number/ player.obj_kill_requirement)
	end
	
	if player.killed_number >= player.obj_kill_requirement then
			 
		local reward = _mod.rewards[player_civ][player.obj_kill_requirement]
		if reward ~= nil then
			
			if reward.age ~= nil then
				local age = Player_GetCurrentAge(player.id)
				if age < reward.age then
					Player_SetCurrentAge(player.id, age + 1)
				end
			end
			
			if reward.unit ~= nil then
				SpawnAndMove(player,reward.unit,reward.num)
			end
			
			if reward.unit_upgrade ~=nil then
				player.unit_type = reward.unit_upgrade
				player.unit_num = reward.num_upgrade
			end
			
			if reward.relic ~= nil then
				-- TODO
				--SpawnAndMove(player,reward.unit,reward.num)
			end

		end
		player.obj_kill_requirement =  nextRequirement(player)
			
	end
	
end


-- This function checks if a House was constructed, updates the builder's Objective progress, and ends the match if it was their 5th House built
-- It is called every time any player constructs a building based on the GLOBAL EVENT RULES configured in Mod_OnInit()
-- Global Event functions are provided with a bundle of data that provide "context" for the event. In the following example, the "context" parameter has been added to store this data.
-- The context parameter will be provided with a table of data that contains the player that constructed the building and the building constructed. You can reference this information within the function.
function Mod_OnConstructionComplete(context)
 
end

-- Victory Presentation 
-- This creates the large "Victory" stinger that animates for winning players at the end of a match
function Mod_WinnerPresentation(playerID)
	
	-- If player is local
	if playerID == localPlayer.id then
		
		-- Clear player's selection
		Misc_ClearSelection()
		-- Hide UI
		Taskbar_SetVisibility(false)		
		-- Set Win Condition Objective to complete
		Obj_SetState(_mod.objective, OS_Complete)

		-- Trigger objective complete pop up
		Obj_CreatePopup(_mod.objective, _mod.objective_title)
		-- Play Victory sfx
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_COMPLETE)
		-- Set objective to invisible
		Obj_SetVisible(_mod.objective, false)
		
		-- Create Victory Stinger
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, { 
			_playerID = playerID, 
			_icon = _mod.icons.objective, 
			_endType = Loc_GetString(11161277), 					-- "VICTORY"  
			_message = Loc_Empty(),
			_sound = "mus_stinger_landmark_objective_complete_success", 
			_videoURI = "stinger_victory" 
		})
	end
end

-- Defeat Presentation
-- This creates the large "Defeat" stinger that animates for losing players at the end of a match
function Mod_LoserPresentation(playerID)
	
	-- If player is local
	if playerID == localPlayer.id then
		
		-- Clear player's selection
		Misc_ClearSelection()
		-- Hide UI
		Taskbar_SetVisibility(false)		
		-- Set Win Condition Objective to failed
		Obj_SetState(_mod.objective, OS_Failed)

		-- Trigger objective complete pop up
		Obj_CreatePopup(_mod.objective, _mod.objective_title)
		-- Play Victory sfx
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_FAIL)
		-- Set objective to invisible
		Obj_SetVisible(_mod.objective, false)

		-- Create Defeat Stinger
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = _mod.icons.objective, 
			_endType = Loc_GetString(11045235), 					-- "DEFEAT"  
			_message = Loc_Empty(),
			_sound = "mus_stinger_landmark_objective_complete_fail", 
			_videoURI = "stinger_defeat"})
	end
end
