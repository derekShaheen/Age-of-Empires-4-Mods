-----------------------------------------------------------------------
--
-- Conquest Win Condition 
--
-- A team is eliminated when all of its players have lost all their castles (including capital town center).
-- The last team remaining is the victor.
--
-- (c) Relic Entertainment 2017
--
-----------------------------------------------------------------------

--import("cardinal.scar")							-- Contains sfx references, UI templates, and Civ/Age helper functions
--import("ScarUtil.scar")							-- Contains game helper functions

-- Import Gameplay Systems
--import("gameplay/score.scar")					-- Tracks player score
--import("gameplay/diplomacy.scar")				-- Manages Tribute


-- Import UI Support
--import("gameplay/chi/current_dynasty_ui.scar")	-- Displays Chinese Dynasty UI

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

if _conquest==nil then

	_conquest = {
	module = "Conquest",
	last_man_standing = false, -- false = fixed teams, true = dynamic diplomacy (i.e. only 1 player can win).
	enemy_castles = -1,	
	icons = {
		objective = "icons\\races\\common\\victory_conditions\\victory_condition_conquest",
		alert = "icons\\event_queue_high_priority_large",
	},	
	types = {
		castle = "castle",
		wonder = "wonder_imperial_age",
		building = "building", 
	},
	objective_title = Loc_Empty(),
	damage_interval = 30.0,
	event_cue_delay = 2.0,
	presentation_delay = 2.0,
	sfx = {
		castle_damaged_player = "mus_stinger_landmark_building_damaged",
		castle_destroyed_player = "mus_stinger_players_landmark_destroyed",
		castle_destroyed_ally = "mus_stinger_ally_landmark_destroyed",
		castle_destroyed_enemy = "mus_stinger_enemy_landmark_destroyed",
		eliminated_player_ally = "Conquest_friendly_eliminated",
		eliminated_enemy = "Conquest_enemy_eliminated",
		victory = "mus_stinger_landmark_objective_complete_success",
		defeat = "mus_stinger_landmark_objective_complete_fail",
	},
	cue_damaged = {				-- event cue shown when capital or landmark is damaged
		title = Loc_Empty(),
		desc = Loc_Empty(),
		sfx = "mus_stinger_landmark_building_damaged",
		icon = "icons\\event_queue_high_priority_large",
		template = "high_priority",
		style = ECV_Queue | ECV_Title,
	},
	cue_destroyed = {			-- event cue shown when capital or landmark is destroyed 
		title = Loc_Empty(),
		desc = Loc_Empty(),
		icon = "icons\\event_queue_high_priority_large",
		template = "high_priority", 
		style = ECV_Queue | ECV_Title,
	},	
	cue_eliminated = {			-- event cue shown when player is eliminated 
		title = Loc_Empty(),
		desc = Loc_Empty(),
		icon = "",
		template = "high_priority", 
		style = ECV_Queue,
	},
}

end

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

Core_RegisterModule(_conquest.module)

-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Callback invoked when Diplomacy is enabled (indicates win condition should be based on player instead of team).
function Conquest_DiplomacyEnabled(isEnabled)
	_conquest.last_man_standing = isEnabled
end


-- Callback invoked by Core::OnInit()
function Conquest_OnInit()
	-- Get local player
	player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	Rule_AddGlobalEvent(Conquest_OnLocalPlayerChanged, GE_LocalPlayerChanged)
	
	
	-- If there is only one player
	if  #PLAYERS <= 1 then
		
		-- Remove Conquest objective
		Core_UnregisterModule(_conquest.module)
		
	-- If there is more than one player
	else
		
		-- For every player
		for _, player in pairs(PLAYERS) do
			
			-- Track Landmarks
			player.castles = {}
			
			-- Get all player entities
			local eg_player_castles = Player_GetAllEntities(player.id)
			-- Filter out all entities except for capital TC's and castles
			EGroup_Filter(eg_player_castles, "castle", FILTER_KEEP)
			
			local _Trackcastle = function(gid, idx, eid)
				
				-- Get entity ID
				local entity_id = Entity_GetID(eid)
				
				-- If entity is a castle or Capital
				if Conquest_IsAcastle(eid) and player.castles[entity_id] == nil  then
					
					-- Track entity IDs since Mongol structures trigger a GE_ConstructionComplete event when unpacked as well as when constructed.
					player.castles[entity_id] = {
						entity = eid,
					 	last_health = Entity_GetHealth(eid),
						damage_timer = string.format("conquest.castle_damage_timer_%d", entity_id), 
						is_a_capital = Conquest_IsACapital(eid),
						last_attacker = nil
					}
					
				end		
			end
			
			-- For every castle found
			EGroup_ForEach(eg_player_castles, _Trackcastle)

		end			
		
		-- Listen for construction completion
		Rule_AddGlobalEvent(Conquest_OnConstructionComplete, GE_ConstructionComplete) 
		-- Listen for damage received
		-- Rule_AddGlobalEvent(Conquest_OnDamageReceived, GE_DamageReceived)
		
		-- Replay stats
		ReplayStatViewer_PopulateReplayStatTabs({"ConquestTrackerTemplate"})
		ReplayStatViewer_RegisterPlayerDataContextUpdater(Conquest_UpdatePlayerStats)
	end
end

-- Start function
function Conquest_Start()
	
	-- Add conquest objectives
	Conquest_AddObjective()
	-- Update objectives
	Conquest_UpdateObjective()
	-- Add rule to check for elimination
	Rule_AddInterval(Conquest_CheckElimination, 1.0)
	
end


-- Callback invoked by Core_OnGameOver() 
function Conquest_OnGameOver()
	
	-- Remove rules on game over
	Rule_RemoveGlobalEvent(Conquest_OnConstructionComplete)
	Rule_RemoveGlobalEvent(Conquest_OnDamageReceived)
	Rule_RemoveGlobalEvent(Conquest_OnLocalPlayerChanged)
	Rule_Remove(Conquest_CheckElimination)
	
end


-- Callback invoked by Core_AddPlayerToTeam()
function Conquest_OnPlayerJoinedTeam(playerData)
	
	-- Update objectives when player added to team
	Conquest_UpdateObjective()
end


-- Global event callback for GE_ConstructionComplete
function Conquest_OnConstructionComplete(context)	

	_conquest.enemy_castles = _conquest.enemy_castles + 1

end


-- Delayed handler for global event GE_ConstructionComplete
function Conquest_PostConstructionComplete(context, data)
 
end


-- Global event callback for GE_DamageReceived
function Conquest_OnDamageReceived(context)
	
	-- If there is an attacker (excludes razing buildings)
	if context.attacker then
		
		-- If building/attacker are not world-owned and building is a Capital Town Center or a castle
		if not World_OwnsEntity(context.victim) and not World_OwnsEntity(context.attacker) and (Conquest_IsACapital(context.victim) or Conquest_IsAcastle(context.victim)) then 
			
			-- Exclude scuttling of incomplete buildings		
			if not Entity_IsBuilding(context.victim) or Entity_GetBuildingProgress(context.victim) >= 1.0 then
				
				-- Get building ID and owner
				local id = Entity_GetID(context.victim)
				local owner = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(context.victim))
				
				-- If castle is being repaired (also triggers OnDamageReceived)
				if context.isRepairing then

					
					return
					
				end
				
				-- If owner has castles
				if owner.castles[id] ~= nil then
					
					-- Create a cue cooldown timer
					local show_cue = not Timer_Exists(owner.castles[id].damage_timer) or Timer_GetRemaining(owner.castles[id].damage_timer) == 0.0		
					Timer_Start(owner.castles[id].damage_timer, _conquest.damage_interval)
					
					-- If no cue cooldown timer is active, castle owner is not eliminated, and local player is not eliminated
					if show_cue 
						and not Core_IsPlayerEliminated(owner.id) 
						and not Core_IsPlayerEliminated(player_local.id)  then
						
						-- Get damaged cue data
						local cue = _conquest.cue_damaged
						
						-- Store last attacker in castle data
						owner.castles[id].last_attacker = Entity_GetPlayerOwner(context.attacker)
						
						-- Get attacking player's colour
						local uiColour = Player_GetUIColour(owner.castles[id].last_attacker)
						
						-- If attacking player is local player
						if owner.castles[id].last_attacker.isLocal then
								
							-- Do nothing
							
							-- If attacking player is local player's ally
						elseif Player_ObserveRelationship(player_local.id, owner.castles[id].last_attacker) == R_ALLY then
								
							-- Do nothing
							
							-- If local player owns castle
						elseif owner.isLocal then
							
							-- Create cue title
							local cue_title = 11198265	 -- Enemy attacking castle
							
							--Notify local player that castle is under attack
							Rule_AddOneShot(Conquest_CreateEventCue, _conquest.event_cue_delay, { title = cue_title, queue_icon = "icons\\event_queue_high_priority", sfx = _conquest.sfx.castle_damaged_player, uiColour = uiColour, highPriority =  true})
							
							-- If local player's ally owns castle
						elseif Player_ObserveRelationship(player_local.id, owner.id) == R_ALLY then
							
							-- Create cue title
							local cue_title = Loc_FormatText(11198266, owner.playerName)	--"Enemy attacking %1PLAYER_NAME%'s castle"
							
							--Notify local player that castle is under attack
							Rule_AddOneShot(Conquest_CreateEventCue, _conquest.event_cue_delay, { title = cue_title, queue_icon = "icons\\event_queue_high_priority", sfx = _conquest.sfx.castle_damaged_player, uiColour = uiColour, highPriority =  false})
						end
					end
				end
			end	
		end
	end
end

-- Callback invoked by Core_SetPlayerDefeated() when a player is eliminated.
function Conquest_OnPlayerDefeated(defeatedPlayer, reason)
	
	-- If win was due to Conquest
	if reason == WR_CONQUEST then
		
		if Player_IsAlive(defeatedPlayer.id) then
			-- Kill player
			World_KillPlayer(defeatedPlayer.id, KPR_Lost)
		end
		
		-- Check for victory
		Conquest_CheckVictory()
		
		if defeatedPlayer == player_local and Core_RevealFOWOnEliminationEnabled() then
			FOW_UIRevealAll()
		end
	end
end

-- Called when local player is changed
function Conquest_OnLocalPlayerChanged(context)
	
	player_local = Core_GetPlayersTableEntry(context.player)
	
end

-- Callback invoked by UpdatePlayerDataContexts() in replaystatviewer.scar to fetch player progress
function Conquest_UpdatePlayerStats(player, scarModel)
	local castles_built = 0
	local castles_remaining = 0
	
	for id, castle in pairs(player.castles) do
		castles_built = castles_built + 1
		if Entity_IsValid(id) then 
			castles_remaining = castles_remaining + 1
		end
	end
		
	scarModel.Conquest_Target = castles_built
	scarModel.Conquest_Current = castles_remaining
end

-----------------------------------------------------------------------
-- Rules
-----------------------------------------------------------------------

-- Eliminates player/team when they have lost all castles 
function Conquest_CheckElimination()
 
	Conquest_UpdateObjective()
			
	--[[Player Elimination Check]]--
				
	-- For every player
	for j, player in pairs(PLAYERS) do
		
		-- If player is not eliminated
		if not Core_IsPlayerEliminated(player.id) then
			
			-- Get player castles built vs remaining
			local player_castles = Conquest_GetPlayercastleCount(player)
			
			-- If all Player castles are destroyed
			if player_castles.remaining == 0 then  
				
				-- Hides repair UI for eliminated player
				Player_SetStateModelBool(player.id, "disable_landmark_rebuild", true)
				-- Fully destroy player's TC/castles to disable ally repair
				Conquest_Destroycastles(player)
				
				Core_SetPlayerDefeated(player.id, Conquest_LoserPresentation, WR_CONQUEST)
																	
				--print(string.format("Conquest_CheckElimination() - Player %d (team %d) eliminated.", player.index, player.team.index))
			end
		end
	end
			
	-- For every player
	for j, player in pairs(PLAYERS) do
		
		-- For every player castle
		for id, castle in pairs(player.castles) do
			
			-- If castle is still considered active but is destroyed or in deactivated state
			if not Entity_IsValid(id) then
				
				-- Get player castles built vs remaining
				local player_castles = Conquest_GetPlayercastleCount(player)
				-- Get Ally castles built/remaining
				local ally_castles = Conquest_GetAllycastleCount(player)
				
				-- If local player is not eliminated and conquest objective is active, also checks that last attacker is not null
				if not Core_IsPlayerEliminated(Game_GetLocalPlayer()) and _conquest.objective ~= nil and castle.last_attacker then 	
					
					-- Get destroyed cue
					local cue = _conquest.cue_destroyed
						
					-- Get attacking player's colour
					local uiColour = Player_GetUIColour(castle.last_attacker)
						
					-- If owner is local
					if player.isLocal then

						-- Set cue title
						cue.title = 11198267 										-- "Enemy destroyed castle"
						
						-- If player's last remaining castle
						if player_castles.remaining == 0 then
							
							-- If not player or ally's last remaining castle (otherwise, failed objective sfx plays)
							if ally_castles.remaining > 0 then
								
								-- Set cue sfx
								cue.sfx = _conquest.sfx.eliminated_player_ally
								
							end
							
						-- If not player's last remaining castle
						else
							
							-- Set cue sfx
							cue.sfx = _conquest.sfx.castle_destroyed_player
							
						end
						
						--Notify local player (the owner) that castle is destroyed
						Rule_AddOneShot(Conquest_CreateEventCue, _conquest.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  true})
						
					else
						
						-- If owner is local player's ally
						if Player_ObserveRelationship(player_local.id, player.id) == R_ALLY then
					
							-- Set cue title
							cue.title = Loc_FormatText(11198268, player.playerName)		-- Enemy destroyed %1PLAYER_NAME%'s castle
							
							-- If player's last remaining castle
							if player_castles.remaining == 0 then
								
								-- If not player or ally's last remaining castle (otherwise, failed objective sfx plays)
								if ally_castles.remaining > 0 then
									
									-- Play eliminated sfx
									cue.sfx = _conquest.sfx.eliminated_player_ally
									
								end
								
							-- If not player's last remaining castle
							else
								
								-- Set cue sfx
								cue.sfx = _conquest.sfx.castle_destroyed_ally
								
							end
							
							--Notify local player that ally's castle is destroyed
							Rule_AddOneShot(Conquest_CreateEventCue, _conquest.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  true})
						
						-- If the owner is an enemy
						else
							
							-- If attacking player is the local player
							if castle.last_attacker == player_local.id then
								
								-- Set cue title
								cue.title = Loc_FormatText(11198590, player.playerName)		-- Destroyed %1PLAYER_NAME%'s castle
								
							-- If attacking player is local player's ally
							elseif Player_ObserveRelationship(player_local.id, castle.last_attacker) == R_ALLY then
								
								-- Set cue title
								cue.title = Loc_FormatText(11198591, player.playerName)		-- Ally destroyed %1PLAYER_NAME%'s castle
								
							-- If attacking player is an enemy
							else
								
								-- Set cue title
								cue.title = Loc_FormatText(11201826, player.playerName)		-- Enemy destroyed %1PLAYER_NAME%'s castle
								
							end
							
							-- Get number of enemies remaining
							local enemies_remaining = Conquest_GetActiveEnemyCount(player_local)
							
							-- If player's last remaining castle and at least 1 enemy remains (otherwise, objective sfx plays)
							if player_castles.remaining == 0 and enemies_remaining > 0 then
								
								-- Set cue sfx
								cue.sfx = _conquest.sfx.eliminated_enemy
								
							-- If not player's last remaining castle
							else
								
								-- Set cue sfx
								cue.sfx = _conquest.sfx.castle_destroyed_enemy
								
							end
							
							-- Notify that enemy castle is destroyed
							Rule_AddOneShot(Conquest_CreateEventCue, _conquest.event_cue_delay, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
							
						end
					end
				end							
			end
		end
	end
end

-----------------------------------------------------------------------
-- Private/Internal functions
-----------------------------------------------------------------------

function Conquest_CheckVictory()
	
	-- Track one of the surviving players
	local winning_player = nil
	
	-- For all players
	for i, player in pairs(PLAYERS) do
		
		-- If player is not eliminated
		if not Core_IsPlayerEliminated(player.id) then 
			
			-- Get remaining enemies of player
			local enemies_remaining = Conquest_GetActiveEnemyCount(player)
			
			-- If no enemies remain
			if enemies_remaining == 0 then
				-- Track player
				winning_player = player
				break
			end
		end
	end
	
	if winning_player ~= nil then
		
		-- For every player
		for i, player in pairs(PLAYERS) do
			
			-- If player is winning player's ally
			if Player_ObserveRelationship(player.id, winning_player.id) == R_ALLY then
				Core_SetPlayerVictorious(player.id, Conquest_WinnerPresentation, WR_CONQUEST)	
			end
		end
	-- If a winning player was not found, check if no humans remain
	else
		
		-- Track humans remaining
		local humansRemaining = {}
		for i, player in pairs(PLAYERS) do
			if (not player.isEliminated) and Player_IsHuman(player.id) then
				table.insert(humansRemaining, player)
			end
		end
		
		-- If no humans remain, resolve match as winnerless. This gracefully resolves matches where the last human player surrenders in an AI game with RelicLink.
		if #humansRemaining == 0 then
			Core_OnGameOver()
			Core_WinnerlessGameOver(Annihilation_LoserPresentation, WR_ANNIHILATION)
		end
	end
end


function Conquest_IsACapital(entity)		
	return false
end


function Conquest_IsAcastle(entity)		
	return Entity_IsOfType(entity, _conquest.types.castle)  	
end

-- Returns number of castles a player has built/remaining
function Conquest_GetPlayercastleCount(player)
	
	-- Track castles
	local player_castles = { 
		remaining = 0,
	}
	
	-- For every player castle
	for id, castle in pairs(player.castles) do 
		
		-- If castle is not destroyed
		if Entity_IsValid(id) then 
			
			-- Incremement castles remaining
			player_castles.remaining = player_castles.remaining + 1
		end
		
	end
	
	-- Return castle data
	return player_castles
	
end

-- Returns number of Allied castles standing for a given player (including given player)
function Conquest_GetAllycastleCount(player)
	
	local ally_castles = { 
		remaining = 0,
	}
	
	-- For every player
	for j, player_other in pairs(PLAYERS) do
		
		-- If players are Allies
		if Player_ObserveRelationship(player.id, player_other.id) == R_ALLY then
			
			-- For every player castle
			for id, castle in pairs(player_other.castles) do
			 
				
				-- If castle is not destroyed
				if Entity_IsValid(id) then 
					
					-- Incremement castles remaining
					ally_castles.remaining = ally_castles.remaining + 1
				end
			end
		end
	end
	
	-- Return castle data
	return ally_castles
	
end

-- Returns number of Enemy castles standing for a given player
function Conquest_GetEnemycastleCount(player)
	
	local enemy_castles = { 
		built = 0,
		remaining = 0,
	}
	
	-- For every player
	for j, player_other in pairs(PLAYERS) do
		
		-- If players are Enemies
		if Player_ObserveRelationship(player.id, player_other.id) == R_ENEMY then
			
			-- For every player castle
			for id, castle in pairs(player_other.castles) do
			
				-- Increment castle count  
				
				-- If castle is not destroyed
				if Entity_IsValid(id) then 
					
					-- Incremement castles remaining
					enemy_castles.remaining = enemy_castles.remaining + 1
				end
			end
		end
	end
	
	enemy_castles.built = _conquest.enemy_castles
	
	-- Return castle data
	return enemy_castles
	
end

-- Returns number of enemies remaining for a given player
function Conquest_GetActiveEnemyCount(player)
	
	-- Track enemies remaining
	local enemies_remaining = {}
	
	-- For every other player
	for i, player_other in pairs(PLAYERS) do
		
		-- If other player is not the given player, is an enemy, and is not eliminated
		if player ~= player_other and not Core_IsPlayerEliminated(player_other.id) and Player_ObserveRelationship(player.id, player_other.id) == R_ENEMY then 
			
			-- Add enemy player to table
			table.insert(enemies_remaining, player_other)
		end
	end
	
	-- Return number of enemies remaining
	return #enemies_remaining
end

-- Destroy a player's TC/castles so they cannot be repaired by an ally (e.g. on player elimination)
function Conquest_Destroycastles(player)
	
	-- For every player castle
	for id, castle in pairs(player.castles) do
		
		-- Kills entity (note: this function executes final destruction animation vs Entity_Destroy which despawns the entity).
		Entity_Kill(castle.entity)
		
	end
end

-----------------------------------------------------------------------
-- UI Functions
-----------------------------------------------------------------------

function Conquest_AddObjective()	
	if _conquest.objective == nil then 
		local localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
		local enemies = 0
		_conquest.objective_title = 11159056				-- "Destroy all enemy castles"

		-- Set primary objective data template (Note: No OR needed as Conquest always precedes other objectives)
		data_template = "ConquestObjectiveTemplate"
		
		_conquest.objective = Obj_Create(localPlayer.id, _conquest.objective_title, Loc_Empty(), _conquest.icons.objective, data_template, localPlayer.raceName, OT_Primary, 0, "conquestObj")		
				
		if _first_primary_objective == nil then 
			_first_primary_objective = _conquest.objective
		end
		
		
		Obj_SetState(_conquest.objective, OS_Incomplete)
		Obj_SetVisible(_conquest.objective, true)
		Obj_SetProgressVisible(_conquest.objective, true)		
		Obj_SetCounterType(_conquest.objective, COUNTER_CountUpTo)
	end
end


function Conquest_UpdateObjective()
	if _conquest.objective ~= nil then
		local localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())		
		local castles_destroyed = 0
		enemy_castles = Conquest_GetEnemycastleCount(localPlayer)
		castles_destroyed = enemy_castles.built - enemy_castles.remaining
		
		Obj_SetCounterCount(_conquest.objective, castles_destroyed)
		Obj_SetCounterMax(_conquest.objective, enemy_castles.built)	
		Obj_SetProgress(_conquest.objective, castles_destroyed / enemy_castles.built)
	end
end


function Conquest_RemoveObjective()
	if _conquest.objective ~= nil then
		Obj_SetVisible(_conquest.objective, false)		
		_conquest.objective = nil
	end	
end			

-- Event cue function to support delayed events
function Conquest_CreateEventCue(context, data)
	
	-- Only show events to active players
	if not Core_IsPlayerEliminated(Game_GetLocalPlayer()) then
		
		-- If event should play in event queue and center screen notification (note: uses high priority icons by default)
		if data.highPriority then
			
			UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, data.title, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority", data.sfx, data.uiColour.r, data.uiColour.g, data.uiColour.b, data.uiColour.a, ECV_Queue, nothing)
			UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, data.title, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority_large", "", data.uiColour.r, data.uiColour.g, data.uiColour.b, data.uiColour.a, ECV_Title, nothing)
			
		-- If event should only play in event queue (note: uses either high priority icon or if not path is specified, the objective arrow icon)
		else
			
			UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, data.title, Loc_Empty(), "event_with_player_color", data.queue_icon, data.sfx, data.uiColour.r, data.uiColour.g, data.uiColour.b, data.uiColour.a, ECV_Queue, nothing)
			
		end
	end
end

function Conquest_SetPlayerDefeated(context, data)

	Core_SetPlayerDefeated(data.player_id, Conquest_LoserPresentation, WR_CONQUEST)
	
end

-- Win/Lose Presentation Functions
function Conquest_WinnerPresentation(playerID)
	
	Rule_AddOneShot(Conquest_DelayedWinnerPresentation, _conquest.presentation_delay, {playerID = playerID})
	
end

function Conquest_DelayedWinnerPresentation(context, data)
	
	if data.playerID == Game_GetLocalPlayer() then
		Misc_ClearSelection()
		Taskbar_SetVisibility(false)		
		
		Obj_SetState(_conquest.objective, OS_Complete)
		Obj_CreatePopup(_conquest.objective, _conquest.objective_title)
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_COMPLETE_ENDGAME)
		Conquest_RemoveObjective()
		
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, { 
			_playerID = data.playerID, 
			_icon = _conquest.icons.objective, 
			_endType = Loc_GetString(11161277), 					-- "VICTORY"  
			_message = Loc_Empty(),									-- Unused 
			_sound = _conquest.sfx.victory, 
			_videoURI = "stinger_victory" 
		})
	end
	
end

function Conquest_LoserPresentation(playerID)
	
	Rule_AddOneShot(Conquest_DelayedLoserPresentation, _conquest.presentation_delay, {playerID = playerID})
	
end

function _Conquest_RevealUI()
	Taskbar_SetVisibility(true)
end

function Conquest_SetupFailStinger()
	Misc_ClearSelection()
	Taskbar_SetVisibility(false)
	Obj_SetState(_conquest.objective, OS_Failed)		
	Obj_CreatePopup(_conquest.objective, _conquest.objective_title)
	Music_PlayStinger(MUS_STING_PRIMARY_OBJ_FAIL)
end

function Conquest_DelayedLoserPresentation(context, data)

	local player_local = Game_GetLocalPlayer()
	if data.playerID == player_local or Player_ObserveRelationship(player_local, data.playerID) == R_ALLY then
		-- Team member was destroyed, check if the entire team is eliminated
		
		if Core_IsEntireTeamEliminated(player_local) then
			Conquest_SetupFailStinger()
			
			Conquest_RemoveObjective() -- Only on defeat, otherwise the team could still win
			
			local title = Loc_GetString(11165094)			-- "DEFEAT"
			local video = "stinger_defeat"
			Rule_AddOneShot(_gameOver_message, 
				GAMEOVER_OBJECTIVE_TIME, {
				_playerID = player_local, 
				_icon = _conquest.icons.objective,
				_endType = title,
				_message = Loc_Empty(),
				_sound = _conquest.sfx.defeat, 
				_videoURI = video,
				_callback = _Conquest_RevealUI
			})
			return
		end
	end
	
	-- Was not a Total party kill, however if the loser is the local player - they are eliminated
	if data.playerID == Game_GetLocalPlayer() then	
		Conquest_SetupFailStinger()
		
		local title = Loc_GetString(11165821)		-- "ELIMINATED"
		local video = "stinger_eliminated"
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = player_local, 
			_icon = _conquest.icons.objective,
			_endType = title,
			_message = Loc_Empty(),
			_sound = _conquest.sfx.defeat, 
			_videoURI = video,
			_callback = _Conquest_RevealUI
		})
	end	
end