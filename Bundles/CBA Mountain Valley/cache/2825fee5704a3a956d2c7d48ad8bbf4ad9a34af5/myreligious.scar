-----------------------------------------------------------------------
--
-- Religious Win Condition 
--
-- Players (or Teams) use Monks to capture Holy Sites around the map.
-- When the player or team captures all Holy Sites, they must defend them for a period of time to win the match.
--
-- (c) Relic Entertainment 2020
--
-----------------------------------------------------------------------

-- Provide data to replay system through this script
import("replay/replaystatviewer.scar")

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

_religious = {
	module = "Religious",		-- Module name
	last_person_standing = false,	-- true = fixed teams, false = dynamic diplomacy (i.e. only 1 player can win)
	conversion_radius = 10.0,	-- Radius around holy sites within which a monk/unit must be to capture/neutralize it - must match value in Holy Site strategic_point_ext
	update_interval = 0.125,
	time_victory = 8 * 60,		-- Countdown time to victory after all sites are captured (in seconds)	
	timer_victory = "capture_victory_timer",
	countdown_notifications = {	-- Points during countdown at which to update audio.   
		{ time = 3 * 60 },		-- Arrange in decreasing order since music intensity increases when the last one triggers
		{ time = 2 * 60 },
		{ time = 1 * 60 },
	},
	icons = {
		objective = "icons\\races\\common\\victory_conditions\\victory_condition_religious",  
	},	
	ebp = {
		holy_site = BP_GetEntityBlueprint("holy_site"),
	},
	objective = {
		control = nil,			-- ID of holy site control objective (win condition)
	},
	sites = {},
	last_capturer = nil,
	sfx = {
		begin_capture_enemy = "sfx_ui_event_queue_religious_enemy_capture_start_play", 				-- Enemy begins capturing a neutral Holy Site (at 0%)
		begin_capture_player = "sfx_ui_event_queue_religious_player_capture_start_play", 				-- Player begins capturing a neutral Holy Site (at 0%)
		begin_capture_ally = "sfx_ui_event_queue_religious_player_capture_start_play", 				-- Ally begins capturing a neutral Holy Site (at 0%)
		captured_enemy = "sfx_ui_event_queue_religious_enemy_captured_play", 	-- Enemy captured Holy Site
		captured_player = "sfx_ui_event_queue_religious_player_captured_play", 	-- Player captured Holy Site
		captured_ally = "sfx_ui_event_queue_religious_player_captured_play", 	-- Ally captured Holy Site
		begin_neutralize_enemy = "sfx_ui_holy_site_contesting_start_enemy_play", 			-- Enemy begins neutralizing captured Holy Site (at 100%)
		begin_neutralize_player = "sfx_ui_holy_site_contesting_start_player_play", 			-- Player begins neutralizing captured Holy Site (at 100%)
		begin_neutralize_ally = "sfx_ui_holy_site_contesting_start_player_play", 			-- Ally begins neutralizing captured Holy Site (at 100%)
		neutralized_enemy = "sfx_ui_holy_site_neutralized_enemy_play", 				-- Enemy neutralizes Holy Site with no Monks in range (if Monks in range, begin capture event will fire instead)
		neutralized_player = "sfx_ui_holy_site_neutralized_player_play", 				-- Player neutralizes Holy Site with no Monks in range (if Monks in range, begin capture event will fire instead)
		neutralized_ally = "sfx_ui_holy_site_neutralized_player_play", 					-- Ally neutralizes Holy Site with no Monks in range (if Monks in range, begin capture event will fire instead)
		countdown_start_enemy_team = "mus_stinger_wonder_win_countdown_enemy",		-- Enemy captures all Holy Sites and initiates countdown
		countdown_start_player_team = "mus_stinger_wonder_win_countdown_player",	-- Player/Ally captures all Holy Sites and initiates countdown
		countdown_stop_enemy_team = "mus_stinger_religious_countdown_interrupted_enemy",					-- Enemy's countdown shut down
		countdown_stop_player_team = "mus_stinger_religious_countdown_interrupted_player",							-- Player/Ally's countdown shut down
		sfx_victory_timer_first = "sfx_ui_victory_countdown_update_first",
		sfx_victory_timer_second = "sfx_ui_victory_countdown_update_second",
		sfx_victory_timer_final = "sfx_ui_victory_countdown_update_final",
		sfx_victory_timer_mix_event = "mus_shared_victory_countdown_mix_event",
		sfx_victory_timer_mix_reset_event = "mus_shared_victory_countdown_mix_event_reset",
		defeat = "ReligiousDefeatEvent", 											-- Enemy team wins
		victory = "ReligiousVictoryEvent", 											-- Player's team wins
	},
	progress = {
		min = 0,
		max = 1.00,
}

}

-----------------------------------------------------------------------
-- Scripting framework
-----------------------------------------------------------------------

Core_RegisterModule(_religious.module)

-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Callback invoked when Diplomacy is enabled (indicates whether win condition should be based on player or team).
function Religious_DiplomacyEnabled(is_enabled)
	_religious.last_person_standing = is_enabled
end

-- Callback invoked by OnInit() in core.scar
function Religious_OnInit()

	-- Get local player
	player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	
	-- Create new EGroup
	local eg = EGroup_CreateUnique()
	-- Get all Holy Sites
	World_GetBlueprintEntities(_religious.ebp.holy_site, eg)	
	
	-- For every Holy Site
	for i = 1, EGroup_CountSpawned(eg) do
		
		-- Grab data for Holy Site
		local site = {
			id = Entity_GetID(EGroup_GetSpawnedEntityAt(eg, i)),
			entity = EGroup_GetSpawnedEntityAt(eg, i),
			pos = Entity_GetPosition(EGroup_GetSpawnedEntityAt(eg, i)),
			player_last_capturing = nil,
			color_last_capturing = nil, -- Stores the color used for progress bars. When Ally is last capturer, local player color is used
			progress = _religious.progress.min,
		}
		
		-- Store data globally
		table.insert(_religious.sites, site)
	end
	
	-- If no Holy Sites were found
	if #_religious.sites == 0 then
		print(string.format("Religious_OnInit() %d holy sites found", #_religious.sites))
		-- Remove win condition module
		Core_UnregisterModule(_religious.module)
	else
		-- Initialize replay stats
		ReplayStatViewer_PopulateReplayStatTabs({"ReligiousTrackerTemplate"})
		ReplayStatViewer_RegisterPlayerDataContextUpdater(Religious_UpdatePlayerStats)
	end
end
	
-- Callback invoked by _StartMission() in core.scar
function Religious_Start()

	-- Override victory countdown period if 'timer' command line parameter and value are provided
	if Misc_IsCommandLineOptionSet("timer") and tonumber(Misc_GetCommandLineString("timer")) ~= nil then
		_religious.time_victory = tonumber(Misc_GetCommandLineString("timer")) * 60
	end
	
	-- Initialize Objectives
	Religious_AddObjective()
	-- Update Objective Progress
	Religious_UpdateObjectiveCounter()
	-- Update on interval
	Rule_AddInterval(Religious_Update, _religious.update_interval)
	-- Update when Holy Site ownership changes
	Rule_AddGlobalEvent(Religious_OnHolySiteChange, GE_StrategicPointChanged)
	Rule_AddGlobalEvent(Religious_OnLocalPlayerChanged, GE_LocalPlayerChanged)
	
end

-- Callback invoked by Core_SetPlayerDefeated() in core.scar when a player is eliminated.
function Religious_OnPlayerDefeated(player, reason)
	
	-- If win was due to Religion
	if reason == WR_RELIGIOUS then
		
		if Player_IsAlive(player.id) then
			-- Kill player
			World_KillPlayer(player.id, KPR_Lost)
		end
	end
	
	-- If player is local player
	if player.isLocal then
		-- Remove their objectives
		Religious_RemoveObjectives()
	end
end

-- Callback invoked by Core_OnGameOver() in core.scar when a win condition has been satisfied. 
function Religious_OnGameOver()
	-- Remove update rule to disable UI elements before end-of-match flow starts.
	Rule_Remove(Religious_Update)
	
	Rule_RemoveGlobalEvent(Religious_OnLocalPlayerChanged)
	
	-- Stop music
	Rule_AddOneShot(Religious_StopMusic, 1)
	-- need the delay to have the correct order of operations to stop the music	
	
end
	
-- Callback invoked by UpdatePlayerDataContexts() in replaystatviewer.scar to fetch player progress
function Religious_UpdatePlayerStats(player, scarModel)	
	scarModel.Relics_Target = #_religious.sites
	scarModel.Relics_Current = Religious_SitesOwnedByPlayer(player)
end

-----------------------------------------------------------------------
-- Rules
-----------------------------------------------------------------------

function Religious_Update()
		
	-- For every Holy Site
	for i, site in ipairs(_religious.sites) do
		
		-- Get Site Entity
		local e_site = Entity_FromID(site.id)

		-- For every player
		for j, player in pairs(PLAYERS) do
			
			-- Get Holy Site progress
			site.progress = Player_GetStrategicPointCaptureProgress(player.id, e_site)
			
			-- If progress is made
			if (site.progress > 0) then
				
				-- Get appropriate UI colour from site
				local uiColour = site.color_last_capturing
				-- Set objective colour to player colour
				Obj_SetColour(site.objective, uiColour.r, uiColour.g, uiColour.b, uiColour.a)
				
				-- Set Holy Site objective progress to progress value
				Obj_SetProgress(site.objective, site.progress)
				
				local obj_state = Obj_GetState(site.objective)
				
				-- If player is local, objective is not complete, and site is captured
				if (player.id == player_local.id and Obj_GetState(site.objective) == OS_Incomplete and site.progress == 1) then
					
					-- Mark objective as complete
					Obj_SetState(site.objective, OS_Complete)
				end
				
			-- If no progress
			elseif (site.progress == 0) then
				
				-- Set Holy Site objective progress to progress value
				Obj_SetProgress(site.objective, site.progress)
				
				-- If player is local and objective is complete
				if (player.id == player_local.id and Obj_GetState(site.objective) == OS_Complete) then
					
				-- Mark objective as incomplete
				Obj_SetState(site.objective, OS_Incomplete)
				end						
			end	
			
			-- Update objective counter
			Religious_UpdateObjectiveCounter()
		end
	end

	-- Update Religious Objectives
	Religious_UpdateObjectiveState()
	
end

-- Called when Holy Site ownership changes
function Religious_OnHolySiteChange(context)
	
	-- Check if squad is nil and exit function if there is no instigating squad, except for changeType CT_StartedRevertingCooldown (7)
	-- since that change type doesn't require a squad, and the squad can be nil when a squad dies within the capture radius.
	if (context.instigatorSquad == nil and not context.changeType == 7) then
		print(string.format("Nil Squad for Holy Site Change Type %d", context.changeType))
		return
	end
	
	-- Get Holy Site position
	local holy_site_pos = Entity_GetPosition(context.strategicPointEntity)
	
	-- CT_Captured: If captured
	if (context.changeType == 0) then
			
		-- Get instigating player
		local instigating_player = Squad_GetPlayerOwner(context.instigatorSquad)
		
		-- Store instgating player as last capturer
		_religious.last_capturer = instigating_player
		
		-- Get instigating player's colour
		local uiColour = Player_GetUIColour(instigating_player)
		
		-- If a group of allies is not in control of all Holy Sites
		if not Religious_AllSitesControlled() then
			
			-- If capturing player is not local player's ally
			if Player_ObserveRelationship(player_local.id, instigating_player) == R_ENEMY then
				
				--Notify opposing players that Holy Site is being captured
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191226, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority", _religious.sfx.captured_enemy, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Enemy captured Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191226, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority_large", "", uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Title, nothing) -- Enemy captured Holy Site
				
			-- If local player captured
			elseif (player_local.id == instigating_player) then
				
				--Notify player that they captured a Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11183997, Loc_Empty(), "event_with_player_color", "", _religious.sfx.captured_player, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Holy Site captured
				
			-- If local player's ally captured
			elseif Player_ObserveRelationship(player_local.id, instigating_player) == R_ALLY then
				
				--Notify player that their ally captured a Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191225, Loc_Empty(), "event_with_player_color", "", _religious.sfx.captured_ally, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Ally captured Holy Site
				
			end
			
			-- Trigger a blip that matches colour of instigator
			UI_CreateMinimapBlipOnPosFrom(instigating_player, holy_site_pos, 5, "objective_holy_site")
			
		-- If a group of allies is in control of all Holy Sites
		else
			
			-- If capturing player is not local player's ally
			if Player_ObserveRelationship(player_local.id, instigating_player) == R_ENEMY then
				
				--Notify opposing players that Holy Site is being captured
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191452, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority", _religious.sfx.captured_enemy, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Enemy is approaching Religious Victory
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191452, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority_large", "", uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Title, nothing) -- Enemy is approaching Religious Victory
				-- Initiate minimap blips
				Rule_AddInterval(Religious_HolySiteMinimapBlips, 5)
				-- Flash Holy Sites
				Rule_AddInterval(Religious_FlashAllHolySites, 1)
				
			-- If local player or an ally captured the final site
			elseif Player_ObserveRelationship(player_local.id, instigating_player) == R_ALLY then
				
				--Notify player that their ally captured a Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191453, Loc_Empty(), "event_with_player_color", "", "", uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- You are approaching Religious Victory
				
			end
		end
		
	-- CT_Reverting: If owned Holy Site is being neutralized
	elseif (context.changeType == 1) then
		
		-- For each Holy Site
		for _, site in pairs(_religious.sites) do
			
			-- If Holy Site is being neutralized
			if (site.entity == context.strategicPointEntity) then
				
				-- If site is flashing
				if not site.flash then
					-- Store flash
					site.flash = UI_FlashObjectiveIcon(site.objective, true)
					-- set scarmodel is flashing to false
					UI_SetEntityDataContext(site.entity, {is_flashing = true})
				end
			end
		end
		
		-- Get instigating player
		local instigating_player = Squad_GetPlayerOwner(context.instigatorSquad)
		
		-- Get instigating player's colour
		local uiColour = Player_GetUIColour(instigating_player)
		
		-- Get Holy Site progress
		local holy_site_progress = Player_GetStrategicPointCaptureProgress(player_local.id, context.strategicPointEntity)
		
		-- If Holy Site has not been contested recently
		if (math.abs(holy_site_progress) == 1) then
			
			-- If local player or ally owns Holy Site and instigating player is not local player's ally
			if Player_ObserveRelationship(player_local.id, context.strategicPointOwner) == R_ALLY and Player_ObserveRelationship(player_local.id, instigating_player) == R_ENEMY then
				
				--Notify that Holy Site is contested
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11197277, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority", _religious.sfx.begin_neutralize_enemy, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Enemy neutralizing Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11197277, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority_large", "", uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Title, nothing) -- Enemy neutralizing Holy Site
				
			-- If local player does not own the Holy Site and is instigating
			elseif player_local.id ~= context.strategicPointOwner and player_local.id == instigating_player then
				
				--Notify player that they are neutralizing Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11197278, Loc_Empty(), "event_with_player_color", "", _religious.sfx.begin_neutralize_player, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Neutralizing Holy Site
				
			-- If local player does not own the Holy Site and ally is instigating
			elseif player_local.id ~= context.strategicPointOwner and Player_ObserveRelationship(player_local.id, instigating_player) == R_ALLY then
				
				--Notify player that they are neutralizing Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11197279, Loc_Empty(), "event_with_player_color", "", _religious.sfx.begin_neutralize_ally, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Ally neutralizing Holy Site
		
			end
		end
		
		-- Trigger a blip that matches colour of instigator
		UI_CreateMinimapBlipOnPosFrom(instigating_player, holy_site_pos, 5, "objective_holy_site_spin")
		
		-- If victory timer is active
		if Timer_Exists(_religious.timer_victory) then
			
			-- Pause victory timer
			Timer_Pause(_religious.timer_victory)
			
		end
		
	-- CT_Secured: If secured
	elseif (context.changeType == 2) then
		
		-- Not used
		
	-- CT_UnCaptured: If Holy Site is neutralized
	elseif (context.changeType == 3) then
		
		-- Stop flashing site
		for _, site in pairs(_religious.sites) do
			
			-- If Holy Site is being neutralized
			if (site.entity == context.strategicPointEntity) then
				
				-- If site is flashing
				if site.flash then
					-- Stop Flash
					UI_StopFlashing(site.flash)
					-- Track that Flash stopped
					site.flash = nil
				end
				
				-- Set scarmodel is flashing to false
				UI_SetEntityDataContext(site.entity, {is_flashing = false})
				
			end
		end
		
		-- Get instigating player
		local instigating_player = Squad_GetPlayerOwner(context.instigatorSquad)
		
		-- Get instigating player's colour
		local uiColour = Player_GetUIColour(instigating_player)
		
		-- If squad group doesn't already exist
		if sg_nearby == nil then
			-- Create squad group for nearby units
			sg_nearby = SGroup_CreateUnique()
		end

		-- Track players with Monks nearby
		local players_with_monks_nearby = {}
		-- Track number of players with Monks nearby
		local players_with_monks_count = 0

		-- For each player
		for j, player in pairs(PLAYERS) do
			
			-- Get squads near Holy Site
			World_GetSquadsNearPoint(player.id, sg_nearby, holy_site_pos, _religious.conversion_radius, OT_Player)
			-- Filter out moving buildings and gaia
			SGroup_Filter(sg_nearby, {"mongol_moving_structure", "gaia"}, FILTER_REMOVE)
	
			-- For every unit found
			for k = 1, SGroup_Count(sg_nearby) do
		
				-- If squad is a Monk and player is not already in table
				if Squad_IsOfType(SGroup_GetSquadAt(sg_nearby, k), "monk") and not Table_Contains(players_with_monks_nearby, player) then
					-- Add player to table
					table.insert(players_with_monks_nearby, player)
					-- Increment count
					players_with_monks_count = players_with_monks_count + 1
					break
				end
			end
		end

		-- If no players have monks in range of Holy Site (note: this ensures that the neutralized/lost cues do not overlap with the capture started cues if an enemy Monk is in range)
		if (players_with_monks_count == 0) then
			
			-- If local player does not own Holy Site and local player neutralized
			if player_local.id ~= context.strategicPointOwner and player_local.id == instigating_player then
				
				--Notify that Holy Site is neutralized
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191286, Loc_Empty(), "event_with_player_color", "", _religious.sfx.neutralized_enemy, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Neutralized Holy Site
			
			-- If local player does not own Holy Site and ally neutralized
			elseif player_local.id ~= context.strategicPointOwner and Player_ObserveRelationship(player_local.id, instigating_player) == R_ALLY then
				
				--Notify that Holy Site is neutralized
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191378, Loc_Empty(), "event_with_player_color", "", _religious.sfx.neutralized_ally, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Ally neutralized Holy Site
				
			-- If local player or ally lost the Holy Site
			elseif Player_ObserveRelationship(player_local.id, context.strategicPointOwner) == R_ALLY then
				
				--Notify player that Holy Site is lost
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191287, Loc_Empty(), "event_with_player_color", "", _religious.sfx.neutralized_player, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Holy Site lost

			end
		end
		
		-- Trigger a blip that matches colour of instigator
		UI_CreateMinimapBlipOnPosFrom(instigating_player, holy_site_pos, 5, "objective_holy_site")

	-- CT_Seized: If siezed (triggered briefly between Uncaptured and StartedCapture)
	elseif (context.changeType == 4) then
		
		-- Not used
		
	-- CT_StartedCapture: If capture started/resuming
	elseif (context.changeType == 5) then
		
		-- Get instigating player
		local instigating_player = Squad_GetPlayerOwner(context.instigatorSquad)
		
		-- Get Holy Site progress - 0 to 1 for player/allies, 0 to -1 for enemies
		local holy_site_progress = Player_GetStrategicPointCaptureProgress(player_local.id, context.strategicPointEntity)
		
		-- For every Holy Site
		for _, site in pairs(_religious.sites) do
			
			-- If Holy Site matches the one being captured
			if context.strategicPointEntity == Entity_FromID(site.id) then
				
				-- Store last capturing player
				site.player_last_capturing = instigating_player
				
				-- If the capturing player is local player's ally
				if Player_ObserveRelationship(player_local.id, instigating_player) == R_ALLY then
					
					-- Store local player's colour
					site.color_last_capturing = Player_GetUIColour(player_local.id)
					
				-- If capturing player is not local player's ally
				else
					
					-- Store player colour
					site.color_last_capturing = Player_GetUIColour(instigating_player)
					
				end
				
				-- If Holy Site has not been revealed
				if not site.is_revealed then

					-- Reveal site
					FOW_RevealArea(holy_site_pos, 12, -1)
					-- Track site reveal
					site.is_revealed = true
				end
			end
		end
		
		-- Get instigating player's colour
		local uiColour = Player_GetUIColour(instigating_player)

		-- If Holy Site capture has not started recently
		if holy_site_progress == 0 then
			
			-- If capturing player is not local player's ally
			if Player_ObserveRelationship(player_local.id, instigating_player) == R_ENEMY then
			
				--Notify opposing players that Holy Site is being captured
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11185244, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority", _religious.sfx.begin_capture_enemy, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Enemy capturing Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11185244, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority_large", "", uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Title, nothing) -- Enemy capturing Holy Site
			
			-- If local player is capturing
			elseif player_local.id == instigating_player then
				
				--Notify player that they are capturing Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11190381, Loc_Empty(), "event_with_player_color", "", _religious.sfx.begin_capture_player, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Capturing Holy Site
			
				--Send challenge event
				Game_SendCustomChallengeEvent(player_local.id, CE_ACHIEVBEGINSACREDSITECAPTURE, 1)
				
			-- If local player's ally is capturing
			elseif Player_ObserveRelationship(player_local.id, instigating_player) == R_ALLY then
				
				--Notify player that they are capturing Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11190382, Loc_Empty(), "event_with_player_color", "", _religious.sfx.begin_capture_ally, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Ally capturing Holy Site
				
			end
		end
		
		-- Stop flashing site
		for _, site in pairs(_religious.sites) do
			
			-- If Holy Site is being neutralized
			if (site.entity == context.strategicPointEntity) then
			
				-- If site is flashing
				if site.flash then
					-- Stop Flash
					UI_StopFlashing(site.flash)
					-- Track that Flash stopped
					site.flash = nil
				end
				
				-- Set scarmodel is flashing to false
				UI_SetEntityDataContext(site.entity, {is_flashing = false})
				
			end
		end
		
		-- Trigger a blip that matches colour of instigator
		UI_CreateMinimapBlipOnPosFrom(instigating_player, holy_site_pos, 5, "objective_holy_site_spin")

	-- CT_StartedCooldown: If started cooldown (e.g. progress decrementing to 0 if Monk exits prior to capture)
	elseif (context.changeType == 6) then

		-- Stop flashing site
		for _, site in pairs(_religious.sites) do
			
			-- If Holy Site is being neutralized
			if (site.entity == context.strategicPointEntity) then
			
				-- If site is flashing
				if site.flash then
					-- Stop Flash
					UI_StopFlashing(site.flash)
					-- Track that Flash stopped
					site.flash = nil
				end
				
				-- Set scarmodel is flashing to false
				UI_SetEntityDataContext(site.entity, {is_flashing = false})
				
			end
		end
		
	-- CT_StartedRevertingCooldown: If started reverting cooldown (e.g. enemy begins reverting and exits proximity)
	elseif (context.changeType == 7) then
		
		-- Stop flashing site
		for _, site in pairs(_religious.sites) do
			
			-- If Holy Site is being neutralized
			if (site.entity == context.strategicPointEntity) then
			
				-- If site is flashing
				if site.flash then
					-- Stop Flash
					UI_StopFlashing(site.flash)
					-- Track that Flash stopped
					site.flash = nil
				end
				
				-- Set scarmodel is flashing to false
				UI_SetEntityDataContext(site.entity, {is_flashing = false})
				
			end
		end
		
		-- If victory timer is active
		if Timer_Exists(_religious.timer_victory) then
			
			-- Resume victory timer
			Timer_Resume(_religious.timer_victory, true)
			
		end
		
	-- CT_Halted: If progress halted (e.g. enemy enters proximity while you are present)
	elseif (context.changeType == 8) then
		
		-- Get instigating player
		local instigating_player = Squad_GetPlayerOwner(context.instigatorSquad)
		
		-- Get instigating player's colour
		local uiColour = Player_GetUIColour(instigating_player)
		
		-- Get Holy Site progress - 0 to 1 for player/allies, 0 to -1 for enemies
		local holy_site_progress = Player_GetStrategicPointCaptureProgress(player_local.id, context.strategicPointEntity)
		
		-- If current progress was made by local player's ally
		if holy_site_progress > 0 then
				
			--Notify that Holy Site is contested
			UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11185245, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority", _religious.sfx.begin_neutralize_enemy, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Enemy contesting Holy Site
			
		-- If holy site progress was made by enemy
		elseif holy_site_progress < 0 then
			
			-- If local player is instigating
			if (player_local.id == instigating_player) then
				
				--Notify player that they are neutralizing Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11190419, Loc_Empty(), "event_with_player_color", "", _religious.sfx.begin_neutralize_player, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Contesting Holy Site
				
			-- If ally is instigating
			elseif Player_ObserveRelationship(player_local.id, instigating_player) == R_ALLY then
				
				--Notify player that they are neutralizing Holy Site
				UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11191282, Loc_Empty(), "event_with_player_color", "", _religious.sfx.begin_neutralize_ally, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- Ally contesting Holy Site
				
			end
		end
		
		-- Start flashing site
		for _, site in pairs(_religious.sites) do
			
			-- If Holy Site progress is the one being halted
			if (site.entity == context.strategicPointEntity) then
				
				-- Get player last capturing
				local capturing_player = site.player_last_capturing
				
				-- Trigger a blip that corresponds to the instigating player progress colour
				UI_CreateMinimapBlipOnPosFrom(capturing_player, Entity_GetPosition(context.strategicPointEntity), 5, "objective_holy_site")
				
				-- If site is not flashing
				if not site.flash then
					-- Store Flash
					site.flash = UI_FlashObjectiveIcon(site.objective, true)
					-- Set scarmodel is flashing to true
					UI_SetEntityDataContext(site.entity, {is_flashing = true})
				end
			end
		end
	end
end

-- Called when local player is changed
function Religious_OnLocalPlayerChanged(context)
	
	player_local = Core_GetPlayersTableEntry(context.player)
	
end

-----------------------------------------------------------------------
-- Utility functions
-----------------------------------------------------------------------

-- Returns the number of holy site entities owned by a given player.
function Religious_SitesOwnedByPlayer(player)
	
	-- Track Holy Sites owned
	local sites_owned = 0
	
	-- For every Holy Site
	for _, site in pairs(_religious.sites) do
		-- If Holy Site is not neutral and the given player owns it
		if not World_OwnsEntity(Entity_FromID(site.id)) and Entity_GetPlayerOwner(Entity_FromID(site.id)) == player.id then
			-- Increment Holy Sites owned
			sites_owned = sites_owned + 1
	end
end

	-- Return Holy Sites owned
	return sites_owned
end

-- Returns true if holy sites are owned by a group of allies
function Religious_AllSitesControlled()
	
	-- Gets Holy Sites owned by a given player and their allies
	local Religious_SitesOwnedByAllies = function(player)
		
		-- Tracks Holy Sites owned
		local sites = 0
		
		-- For every Holy Site
		for _, site in pairs(_religious.sites) do
	
			-- Get Holy Site entity
			local holy_site = Entity_FromID(site.id)
			
			-- If site is not neutral
			if not World_OwnsEntity(holy_site) then
				-- Get Site owner
				local site_owner = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(holy_site))
				
				-- If Holy Site is not neutral AND is owned by the given player or their ally
				if not World_OwnsEntity(holy_site) and Player_ObserveRelationship(player.id, site_owner.id) == R_ALLY then
					
					-- Increment Holy Sites owned
					sites = sites + 1
					
				end
			end
		end
		
		-- Return Holy Sites owned by player or allies
		return sites
	end
	
	-- Track if a group of allies is in control of all Holy Sites
	local allies_in_control = false
	
	-- For every player
	for _, player in pairs(PLAYERS) do
		-- If player and allies control all Holy Sites
		if Religious_SitesOwnedByAllies(player) >= #_religious.sites then
			-- Set as allies in control
			allies_in_control = true
			break
		end
	end
	
	return allies_in_control
	
end

-----------------------------------------------------------------------
-- UI functions
-----------------------------------------------------------------------

-- Creates the primary objective associated with this win condition.
function Religious_AddObjective()

	-- Store primary objective template
	local data_template = "HolySiteOrObjectiveDataTemplate"
	-- If a primary objective has not been set
	if _first_primary_objective == nil then
		-- Store primary default template
		data_template = "HolySiteObjectiveDataTemplate"
	end
	
	-- Create victory objective
	_religious.objective.control = Obj_Create(player_local.id,
		11169980, 			-- "Control all Holy Sites"
		Loc_Empty(),
		_religious.icons.objective,
		data_template,
		player_local.raceName,
		OT_Primary,
		0,
		"religiousObj")
	-- Configure objective
	Obj_SetState(_religious.objective.control, OS_Incomplete)
	Obj_SetCounterType(_religious.objective.control, COUNTER_CountUpTo)
	Obj_SetCounterCount(_religious.objective.control, 0)
	Obj_SetCounterMax(_religious.objective.control, #_religious.sites)	
	Obj_SetProgress(_religious.objective.control, 0 / #_religious.sites)
	Obj_SetVisible(_religious.objective.control, true)
	
	-- If first primary objective has not been set
	if _first_primary_objective == nil then 
		-- Assign this objective as primary
		_first_primary_objective = _religious.objective.control
	end

	-- For every Holy Site 
	for i, site in pairs(_religious.sites) do
		-- Create sub objective
		site.objective = Obj_Create(player_local.id,
			Loc_FormatText(11184017, i),					-- "Site %1NUMBER%"
			Loc_Empty(),
			_religious.icons.objective,
			"HolySiteSecondaryObjectiveDataTemplate",
			player_local.raceName,
			OT_Secondary,
			_religious.objective.control,
			"holySiteObj")
		-- Configure sub objective
		Obj_SetProgress(site.objective, site.progress)
		Obj_SetProgressVisible(site.objective, true)
		Obj_SetVisible(site.objective, true)

	end
end

-- Updates the state of the objectives associated with this win condition.
function Religious_UpdateObjectiveState()

	-- Toggles Countdown objective
	local Religious_ToggleCountdownObjective = function(enable, is_friendly)
		
		-- If toggled on
		if enable then
			
			-- Set objective to countdown
			Obj_SetCounterType(_religious.objective.control, COUNTER_TimerDecreasing)
			Obj_SetCounterTimerSeconds(_religious.objective.control, Timer_GetRemaining(_religious.timer_victory))
			
			-- Get last player to capture's colour
			local uiColour = Player_GetUIColour(_religious.last_capturer)
			
			-- If player or ally's countdown was started
			if (is_friendly) then
				
				-- Objective title
				Obj_SetTitle(_religious.objective.control, 11190384) -- "Defend all Holy Sites"
				-- Trigger New Objective cue
				Rule_AddOneShot(Religious_DelayedNewObjective, 0, {text = 11190384, sfx = _religious.sfx.countdown_start_player_team})

			-- If enemy's countdown was started
			else

				-- Objective title
				Obj_SetTitle(_religious.objective.control, 11183992) -- "Neutralize a Holy Site"
				-- Trigger New Objective cue on delay so "...approaching Religious Victory" event has time to fire
				Rule_AddOneShot(Religious_DelayedNewObjective, 12, {text = 11183992, sfx = _religious.sfx.countdown_start_enemy_team})
			end

		-- If toggled off
		else
			
			-- Reset objective to capture
			Obj_SetTitle(_religious.objective.control, 11169980)		-- "Control all Holy Sites"
			Obj_SetCounterType(_religious.objective.control, COUNTER_CountUpTo)
			Obj_SetCounterCount(_religious.objective.control, #_religious.sites - 1)
			Obj_SetCounterMax(_religious.objective.control, #_religious.sites)
			Obj_SetProgress(_religious.objective.control, (#_religious.sites - 1) / #_religious.sites)
			
			-- For every timer threshold
			for i = 1, #_religious.countdown_notifications do 

				-- Reset trigger tracker
				_religious.countdown_notifications[i].triggered = false
				
			end
			
			-- If player or ally's countdown was ended
			if (is_friendly) then
				
				-- Play sfx
				Sound_Play2D(_religious.sfx.countdown_stop_player_team)

			-- If enemy's countdown was ended
			else

				-- Play sfx
				Sound_Play2D(_religious.sfx.countdown_stop_enemy_team)
				-- Play mix event
				Sound_Play2D(_religious.sfx.sfx_victory_timer_mix_reset_event)
				
			end
			
			-- Reset music
			Music_UnlockIntensity()
			ResetMinimumIntensityMusicUnforced()
		end
	end
	
	-- If a group of allies is in control of all Holy Sites
	if Religious_AllSitesControlled() then
		
		-- If a countdown timer does not yet exist
		if not Timer_Exists(_religious.timer_victory) then

			-- Start victory countdown
			Timer_Start(_religious.timer_victory, _religious.time_victory)
			
			-- Update victory countdown
			if Player_ObserveRelationship(player_local.id, _religious.last_capturer) == R_ALLY then
				
				-- Toggle countdown for player
				Religious_ToggleCountdownObjective(true, true)
			else
				
				-- Toggle countdown for enemy
				Religious_ToggleCountdownObjective(true, false)
			end
			
		-- If a timer does exist
		else
			
			-- Update victory countdown
			Obj_SetCounterTimerSeconds(_religious.objective.control, Timer_GetRemaining(_religious.timer_victory))
			Player_SetStateModelFloat(player_local.id, "religious_timer", Timer_GetRemaining(_religious.timer_victory))

			-- For every timer threshold
			for i = 1, #_religious.countdown_notifications do 
				
				-- If threshold notification has not been triggered AND timer is in threshold window
				if not _religious.countdown_notifications[i].triggered and _religious.countdown_notifications[i].time == math.ceil(Timer_GetRemaining(_religious.timer_victory)) then 
					
					-- Track as triggered
					_religious.countdown_notifications[i].triggered = true
					
					-- Get last player to capture's colour
					local uiColour = Player_GetUIColour(_religious.last_capturer)
					
				-- If first notification triggered 
				if i == 1 then 
					
					-- Increase music tempo
					Music_LockIntensity(MUSIC_TENSE, -1)
						
					-- If local player and allies are nearing victory
					if Player_ObserveRelationship(player_local.id, _religious.last_capturer) == R_ALLY then
						
						-- Add time remaining to cue text
						local cue_text = Loc_FormatText(11195756, 3)			-- "%1MINUTES_REMAINING% minutes until Religious Victory"
						--Notify player that 3 minutes remain
						UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, cue_text, Loc_Empty(), "event_with_player_color", "", _religious.sfx.sfx_victory_timer_first, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- 3 minutes until Religious Victory
					
					-- If local player's enemy is nearing victory
					else
						-- Add time remaining to cue text
						local cue_text = Loc_FormatText(11195757, 3)			-- "%1MINUTES_REMAINING% minutes until Religious Defeat"
						--Notify player that 3 minutes remain
						UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, cue_text, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority", _religious.sfx.sfx_victory_timer_first, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- 3 minutes until Religious Defeat
						
					end
						
				-- If second 
				elseif i == 2 then 
					
					-- Increase music tempo
					Music_LockIntensity(MUSIC_TENSE_COMBAT_RARE, -1)
					
					-- If local player and allies are nearing victory
					if Player_ObserveRelationship(player_local.id, _religious.last_capturer) == R_ALLY then
						
						-- Add time remaining to cue text
						local cue_text = Loc_FormatText(11195756, 2)			-- "%1MINUTES_REMAINING% minutes until Religious Victory"
						--Notify player that 2 minutes remain
						UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, cue_text, Loc_Empty(), "event_with_player_color", "", _religious.sfx.sfx_victory_timer_second, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- 2 minutes until Religious Victory
						
					-- If local player's enemy is nearing victory
					else
						-- Add time remaining to cue text
						local cue_text = Loc_FormatText(11195757, 2)			-- "%1MINUTES_REMAINING% minutes until Religious Defeat"
						--Notify player that 2 minutes remain
						UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, cue_text, Loc_Empty(), "event_with_player_color", "", _religious.sfx.sfx_victory_timer_second, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- 2 minutes until Religious Defeat
							
					end
						
				-- If last notification triggered 
				elseif i == #_religious.countdown_notifications then 
						
					-- Increase music tempo
					Music_LockIntensity(MUSIC_RARE, _religious.countdown_notifications[i].time)
					
					-- If local player and allies is nearing victory
					if Player_ObserveRelationship(player_local.id, _religious.last_capturer) == R_ALLY then
						
						--Notify player that 1 minute remains
						UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11195758, Loc_Empty(), "event_with_player_color", "", _religious.sfx.sfx_victory_timer_final, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- 1 minute until Religious Victory
					
					-- If local player's enemy is nearing victory
					else
					
						--Notify player that 1 minute remains
						UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, 11195759, Loc_Empty(), "event_with_player_color", "", _religious.sfx.sfx_victory_timer_final, uiColour.r, uiColour.g, uiColour.b, uiColour.a, ECV_Queue, nothing) -- 1 minute until Religious Defeat
						-- Trigger Mix Event
						Sound_Play2D(_religious.sfx.sfx_victory_timer_mix_event)
						
					end
				end
			end
		end

		-- If countdown reaches 0
		if Timer_GetRemaining(_religious.timer_victory) == 0 then
		
		-- Stop Music
		Rule_AddOneShot(Religious_StopMusic, 1)
		-- need the delay to have the correct order of operations to stop the music
				
			-- Trigger game over
			Core_OnGameOver()	
			
			-- For every player
			for i, player in pairs(PLAYERS) do
				
				-- If player is winning last capturer's ally
				if Player_ObserveRelationship(player.id, _religious.last_capturer) == R_ALLY then
					Core_SetPlayerVictorious(player.id, Religious_WinnerPresentation, WR_RELIGIOUS)	
				-- If player is winning player's enemy
				else
					Core_SetPlayerDefeated(player.id, Religious_LoserPresentation, WR_RELIGIOUS)
				end
			end
		end
	end

	-- If a group of allies is not in control
	else

		-- If a timer exists
		if Timer_Exists(_religious.timer_victory) then

			-- Cancel victory countdown
			Timer_End(_religious.timer_victory)
			Player_SetStateModelFloat(player_local.id, "religious_timer", 0)

			-- Update victory countdown
			if Player_ObserveRelationship(player_local.id, _religious.last_capturer) == R_ALLY then
				
				-- Toggle countdown for player/allies
				Religious_ToggleCountdownObjective(false, true)
			else
				
				-- Toggle countdown for enemy
				Religious_ToggleCountdownObjective(false, false)
			end
		end
	end
end		
		
-- Updates the progress of the primary objective associated with this win condition.
function Religious_UpdateObjectiveCounter()
	
	local counterType = Obj_GetCounterType(_religious.objective.control)
	
	-- If the primary objective exists and is in counter mode (vs timer mode)
	if _religious.objective.control ~= nil and Obj_GetCounterType(_religious.objective.control) == COUNTER_CountUpTo then
		
		-- Track Holy Sites controlled
		local sites_controlled = 0
	
		-- For every Holy Site
		for _, site in pairs(_religious.sites) do
			
			-- If Holy Site is not neutral
			if not World_OwnsEntity(Entity_FromID(site.id)) then

				-- Get Holy Site owner
				local player_owner = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(Entity_FromID(site.id)))

				-- If local player or ally is owner
				if Player_ObserveRelationship(player_local.id, player_owner.id) == R_ALLY then
					
					-- Increment Holy Sites controlled
					sites_controlled = sites_controlled + 1
				end
			end		
		end
			
		-- Update primary objective counter
		Obj_SetCounterCount(_religious.objective.control, sites_controlled)
			
	end
end

-- Displays the high priority "New Objective" message - delayed to leave time for "...approaching Religious Victory" event cue
function Religious_DelayedNewObjective(context, data)
	
	-- Creates new objective pop up
	Obj_CreatePopup(_religious.objective.control, data.text)		-- "Defend all Holy Sites" OR "Neutralize all Holy Sites"
	-- Play sfx
	Sound_Play2D(data.sfx)
	
end

-- Hides objective(s) after player wins/loses
function Religious_RemoveObjectives()

	-- If victory objective exists
	if _religious.objective.control ~= nil then
		-- Hide objective
		Obj_SetVisible(_religious.objective.control, false)		-- Hide (instead of deleting) this since it's used later by objective completed/failed popup
	end
end

-- Pings all Holy Sites (can be called at interval)
function Religious_HolySiteMinimapBlips()
	
	-- If a timer exists
	if Timer_Exists(_religious.timer_victory) then
		
		-- For every Holy Site
		for _, site in pairs(_religious.sites) do
			
			-- Ensure Holy Site is owned by player (should always be in this instance)
			if not World_OwnsEntity(site.entity) then

				-- Trigger a blip that corresponds to Holy Site owner's colour
				UI_CreateMinimapBlipOnPosFrom(Entity_GetPlayerOwner(site.entity), site.pos, 5, "objective_holy_site")

			end
		end
	
	-- If the timer no longer exists
	else
		
		-- Stop blipping
		Rule_RemoveMe()
	end
end

-- Flashes all Holy Sites for enemy countdown
function Religious_FlashAllHolySites()
	
	-- If countdown timer is active
	if Timer_Exists(_religious.timer_victory) then
		
		-- Start Flashing all sites
		for _, site in pairs(_religious.sites) do
			
			-- If site is not flashing
			if not site.flash then
				-- Store Flash
				site.flash = UI_FlashObjectiveIcon(site.objective, true)
				-- Set scarmodel is flashing to true
				UI_SetEntityDataContext(site.entity, {is_flashing = true})
			end
		end
		
	-- If countdown timer is no longer active
	else
		
		-- Stop flashing all sites
		for _, site in pairs(_religious.sites) do

			-- Stop Flash
			UI_StopFlashing(site.flash)
			-- Track that Flash stopped
			site.flash = nil
			
			-- Set scarmodel is flashing to false
			UI_SetEntityDataContext(site.entity, {is_flashing = false})
			
		end
		
		-- Stop this rule
		Rule_RemoveMe()

	end
end


-----------------------------------------------------------------------
-- Win/Lose Presentation Functions
-----------------------------------------------------------------------

function Religious_WinnerPresentation(playerID)
	
	-- Get player
	local player = Core_GetPlayersTableEntry(playerID)
	
	-- If player is local
	if player.isLocal then	
		
		-- Hide UI elements
		Misc_ClearSelection()
		Taskbar_SetVisibility(false)		
		
		-- Show objective complete popup
		Obj_SetState(_religious.objective.control, OS_Complete)
		Obj_CreatePopup(_religious.objective.control, 11169980)		-- "Control all Holy Sites"
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_COMPLETE_ENDGAME)
		Religious_RemoveObjectives()
		
		-- Show victory stinger
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = _religious.icons.objective, 
			_endType = Loc_GetString(11161277), 		-- "VICTORY"
			_message = Loc_Empty(), 					-- Unused
			_sound = _religious.sfx.victory,
			_videoURI = "stinger_victory"
		})
	end
end


function Religious_LoserPresentation(playerID)
	
	-- Get player
	local player = Core_GetPlayersTableEntry(playerID)
	
	-- If player is local
	if player.isLocal then	
		
		-- Hide UI elements
		Misc_ClearSelection()
		Taskbar_SetVisibility(false)	
		
		-- Show objective failed popup
		Obj_SetState(_religious.objective.control, OS_Failed)
		Obj_CreatePopup(_religious.objective.control, 11183992)	-- "Neutralize a Holy Site"
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_FAIL)
		Religious_RemoveObjectives()
	
		-- Show defeat stinger
		Rule_AddOneShot(_gameOver_message,
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = _religious.icons.objective, 
			_endType = Loc_GetString(11165094),			-- "DEFEAT" 
			_message = Loc_Empty(),						-- Unused 
			_sound = _religious.sfx.defeat,
			_videoURI = "stinger_defeat"
		})
	end
end

function Religious_StopMusic()
	--Stop music
	Music_PersistentStop() 
	
end